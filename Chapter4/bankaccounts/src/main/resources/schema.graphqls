type Query {
    customers: [Customer]
    customer(customerId: ID!): Customer
    accounts: [Account!]
    account(accountId: ID!): Account
    entities: [Entity]
    accountsByCustomer(customerId: ID!): [Account!]
    accountsByType(type: AccountType!, customerId: ID): [Account!]
    balance(accountId: ID!): Balance @bankapp_auth(role : "accountOwner")
    totalDeposits(customerId:ID): Float
}

directive @bankapp_auth(role : String!) on FIELD_DEFINITION

type Account {
    id: ID!
    active: Boolean
    name: String
    type: AccountType
    owner: Customer
    availableBalance: Balance @bankapp_auth(role : "accountOwner")
    totalBalance: Balance @bankapp_auth(role : "accountOwner")
}

enum AccountType {
    BASIC_CHECKING
    ADVANCED_CHECKING
    BUSINESS_CHECKING
    SAVINGS
}

type Balance {
    amount: Float
    asOf: String
}

type Customer {
    id: ID!
    active: Boolean
    firstName: String
    lastName: String
    address: Address
    phone: String
    ssn: String
    email: String
}

enum States {
    NEW_YORK
    NEW_JERSEY
    CALIFORNIA
    #...
}

type Address {
    street: String
    city: String
    state: States
    zip: String
}

union Entity = Customer | Account




